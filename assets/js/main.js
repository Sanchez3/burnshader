webpackJsonp([ 0 ], [ /* 0 */
, /* 1 */
, /* 2 */
, /* 3 */
/***/
function(e, n, t) {
    "use strict";
    function r() {
        g = new THREE.LoadingManager(), g.onStart = function(e, n, t) {}, g.onLoad = function() {
            i();
        }, g.onProgress = function(e, n, t) {}, g.onError = function(e) {};
    }
    function i() {
        h.burnTexture = E;
        var e = new THREE.PlaneBufferGeometry(40, 40);
        p = new THREE.ShaderMaterial({
            uniforms: {
                map: h.map,
                burnTex: {
                    value: h.burnTexture
                },
                burnEffect: h.burnEffect,
                progress: {
                    value: h.burnProgress
                },
                isDepth: h.isDepth,
                cameraNear: {
                    value: 100
                },
                cameraFar: {
                    value: 400
                }
            },
            vertexShader: document.getElementById("burnVertexShader").textContent,
            fragmentShader: document.getElementById("burnFragmentShader").textContent
        }), p.transparent = !0;
        var n = new THREE.Mesh(e, p);
        n.position.set(0, 0, 0), m.add(n);
    }
    function a() {
        // CAMERAS
        f = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1e4), 
        f.position.z = 80, // SCENE
        m = new THREE.Scene();
        // uniform float progress;
        // uniform float burnEffect;
        // uniform float isDepth;
        // uniform float cameraNear;
        // uniform float cameraFar;
        // Textures
        var e = new THREE.TextureLoader(g);
        h.map.value = e.load("./assets/img/cat.png"), E = e.load("./assets/img/burningtexture1.png"), 
        v = e.load("./assets/img/burningtexture2.png");
        //renderer
        var n = document.getElementById("container");
        w = new THREE.WebGLRenderer(), w.setPixelRatio(window.devicePixelRatio), w.setSize(window.innerWidth, window.innerHeight), 
        n.appendChild(w.domElement);
    }
    function o() {
        document.addEventListener("touchstart", function(e) {}, false), document.addEventListener("touchmove", function(e) {
            e.preventDefault();
        }, false), window.addEventListener("resize", s, false);
    }
    function u() {
        var e = new dat.GUI(), n = e.addFolder("ShaderMaterial"), t = {
            burningTexture1: E,
            burningTexture2: v
        };
        n.add(h, "burnTexture", Object.keys(t)).onChange(function(e) {
            p.uniforms.burnTex.value = t[e];
        }), n.add(h, "burnProgress", 0, 1).step(.01).onChange(function(e) {
            p.uniforms.progress.value = e;
        }), e.open();
    }
    function d() {
        //loadingManager
        r(), //init Three
        a(), //event
        o(), //GUI
        u(), c();
    }
    function s() {
        f.aspect = window.innerWidth / window.innerHeight, f.updateProjectionMatrix(), w.setSize(window.innerWidth, window.innerHeight);
    }
    function c() {
        requestAnimationFrame(c), l();
    }
    function l() {
        w.render(m, f);
    }
    Object.defineProperty(n, "__esModule", {
        value: true
    });
    /* harmony import */
    var f, m, w, p, g, E, v, b = t(4), h = (t.n(b), {
        burnTexture: "burningTexture1",
        burnProgress: 0,
        burnEffect: {
            value: 1
        },
        isDepth: {
            value: 0
        },
        map: {
            value: null
        }
    });
    window.onload = function() {
        d();
    }, function() {
        function e() {
            n.begin(), // monitored code goes here
            n.end(), requestAnimationFrame(e);
        }
        var n = new Stats();
        n.showPanel(0);
        // 0: fps, 1: ms, 2: mb, 3+: custom
        var t = document.createElement("div");
        t.style.position = "absolute", t.style.left = 0, t.style.top = 0, t.style.zIndex = 999, 
        t.appendChild(n.domElement), document.body.appendChild(t), requestAnimationFrame(e);
    }();
}, /* 4 */
/***/
function(e, n) {} ], [ 3 ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,