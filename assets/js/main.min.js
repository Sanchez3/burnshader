webpackJsonp([ 0 ], [ /* 0 */
, /* 1 */
, /* 2 */
, /* 3 */
/***/
function(e, n, t) {
    "use strict";
    function i() {
        o.aspect = window.innerWidth / window.innerHeight, o.updateProjectionMatrix(), s.setSize(window.innerWidth, window.innerHeight);
    }
    function r() {
        requestAnimationFrame(r), a();
    }
    function a() {
        s.render(d, o);
    }
    Object.defineProperty(n, "__esModule", {
        value: true
    });
    /* harmony import */
    var o, d, s, u = t(4), c = (t.n(u), {
        progress: {
            value: 1
        },
        burnEffect: {
            value: 1
        },
        isDepth: {
            value: 0
        }
    });
    !function() {
        function e() {
            var e = new THREE.ShaderMaterial({
                uniforms: {
                    map: {
                        value: r
                    },
                    burnTex: {
                        value: a
                    },
                    burnEffect: c.burnEffect,
                    progress: c.progress,
                    isDepth: c.isDepth,
                    cameraNear: {
                        value: 100
                    },
                    cameraFar: {
                        value: 400
                    }
                },
                vertexShader: document.getElementById("burnVertexShader").textContent,
                fragmentShader: document.getElementById("burnFragmentShader").textContent
            });
            e.transparent = !0;
            var n = new THREE.Mesh(u, e);
            n.position.set(0, 0, 0), d.add(n);
        }
        o = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1e4), 
        o.position.z = 80, d = new THREE.Scene();
        var n = new THREE.LoadingManager();
        n.onStart = function(e, n, t) {}, n.onLoad = function() {
            e();
        }, n.onProgress = function(e, n, t) {}, n.onError = function(e) {};
        var t = new THREE.TextureLoader(n), r = t.load("./assets/img/cat.png"), a = (t.load("./assets/img/burningtexture1.png"), 
        t.load("./assets/img/burningtexture2.png")), u = new THREE.PlaneBufferGeometry(40, 40), l = document.getElementById("container");
        s = new THREE.WebGLRenderer(), s.setPixelRatio(window.devicePixelRatio), s.setSize(window.innerWidth, window.innerHeight), 
        l.appendChild(s.domElement), //events
        document.getElementById("range-btn").addEventListener("mousemove", function() {
            c.progress.value = this.value;
        }), window.addEventListener("resize", i, false);
    }(), r(), function() {
        function e() {
            n.begin(), // monitored code goes here
            n.end(), requestAnimationFrame(e);
        }
        var n = new Stats();
        n.showPanel(0);
        // 0: fps, 1: ms, 2: mb, 3+: custom
        var t = document.createElement("div");
        t.style.position = "absolute", t.style.left = 0, t.style.top = 0, t.style.zIndex = 999, 
        t.appendChild(n.domElement), document.body.appendChild(t), requestAnimationFrame(e);
    }();
}, /* 4 */
/***/
function(e, n) {} ], [ 3 ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,