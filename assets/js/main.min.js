webpackJsonp([ 0 ], [ /* 0 */
, /* 1 */
, /* 2 */
, /* 3 */
/***/
function(e, n, t) {
    "use strict";
    function i() {
        f = new THREE.LoadingManager(), f.onStart = function(e, n, t) {}, f.onLoad = function() {
            r();
        }, f.onProgress = function(e, n, t) {}, f.onError = function(e) {};
    }
    function r() {
        var e = new THREE.PlaneBufferGeometry(40, 40);
        window.shaderMaterial = new THREE.ShaderMaterial({
            uniforms: {
                map: E.map,
                burnTex: E.burnTex,
                burnEffect: E.burnEffect,
                progress: E.progress,
                isDepth: E.isDepth,
                cameraNear: {
                    value: 100
                },
                cameraFar: {
                    value: 400
                }
            },
            vertexShader: document.getElementById("burnVertexShader").textContent,
            fragmentShader: document.getElementById("burnFragmentShader").textContent
        }), window.shaderMaterial.transparent = !0;
        var n = new THREE.Mesh(e, window.shaderMaterial);
        n.position.set(0, 0, 0), w.add(n);
    }
    function a() {
        c = new THREE.PerspectiveCamera(50, window.innerWidth / window.innerHeight, 1, 1e4), 
        c.position.z = 80, w = new THREE.Scene();
        var e = new THREE.TextureLoader(f);
        E.map.value = e.load("./assets/img/cat.png"), window.burnTex1 = e.load("./assets/img/burningtexture1.png"), 
        window.burnTex2 = e.load("./assets/img/burningtexture2.png"), E.burnTex.value = window.burnTex1;
        //renderer
        var n = document.getElementById("container");
        m = new THREE.WebGLRenderer(), m.setPixelRatio(window.devicePixelRatio), m.setSize(window.innerWidth, window.innerHeight), 
        n.appendChild(m.domElement);
    }
    function o() {
        document.addEventListener("touchstart", function(e) {}, false), document.addEventListener("touchmove", function(e) {
            e.preventDefault();
        }, false), document.getElementById("range-btn").addEventListener("mousemove", function() {
            E.progress.value = this.value;
        }), document.getElementById("range-btn").addEventListener("touchmove", function() {
            E.progress.value = this.value;
        }), document.getElementById("tex1-btn").addEventListener("click", function() {
            // b.burnTex.value = window.burnTex1;
            window.shaderMaterial.uniforms.burnTex.value = window.burnTex1;
        }), document.getElementById("tex2-btn").addEventListener("click", function() {
            window.shaderMaterial.uniforms.burnTex.value = window.burnTex2;
        }), window.addEventListener("resize", u, false);
    }
    function d() {
        //loadingManager
        i(), //init Three
        a(), //event
        o(), s();
    }
    function u() {
        c.aspect = window.innerWidth / window.innerHeight, c.updateProjectionMatrix(), m.setSize(window.innerWidth, window.innerHeight);
    }
    function s() {
        requestAnimationFrame(s), l();
    }
    function l() {
        m.render(w, c);
    }
    Object.defineProperty(n, "__esModule", {
        value: true
    });
    /* harmony import */
    var c, w, m, f, v = t(4), E = (t.n(v), {
        progress: {
            value: 0
        },
        burnEffect: {
            value: 1
        },
        isDepth: {
            value: 0
        },
        burnTex: {
            value: null
        },
        map: {
            value: null
        }
    });
    window.onload = function() {
        d();
    }, function() {
        function e() {
            n.begin(), // monitored code goes here
            n.end(), requestAnimationFrame(e);
        }
        var n = new Stats();
        n.showPanel(0);
        // 0: fps, 1: ms, 2: mb, 3+: custom
        var t = document.createElement("div");
        t.style.position = "absolute", t.style.left = 0, t.style.top = 0, t.style.zIndex = 999, 
        t.appendChild(n.domElement), document.body.appendChild(t), requestAnimationFrame(e);
    }();
}, /* 4 */
/***/
function(e, n) {} ], [ 3 ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,